---
- hosts: 127.0.0.1
  connection: local

  vars:
    dev_env_dir: /usr/local/gdev-env
    gdev_user_files: "{{ansible_env.HOME}}/.gdev"

  tasks:

    - name: Check Sudo Password
      command: "echo 'sudo works'"
      become: yes
      become_method: sudo

    - name: Update Homebrew
      homebrew: update_homebrew=yes

    - name: Install Docker and Extras
      homebrew:
        name: "{{ item }}"
        state: latest
      with_items:
        - docker
        - docker-compose
        - dlite

    - name: Create resolver directory
      file:
        path: "{{ansible_env.HOME}}/.dlite"
        state: directory
        mode: 0755

    - name: Create machine
      command: "{{ dev_env_dir }}/bin/gdev machine create"
      args:
        creates: "{{ansible_env.HOME}}/.dlite/config.json"
      become: yes
      become_method: sudo

    - name: Start machine
      command: "{{ dev_env_dir }}/bin/gdev machine start"
      args:
        creates: "{{ansible_env.HOME}}/.dlite/config.json"
      become: yes
      become_method: sudo

    - name: Wait for machine to start
      wait_for:
        path: "/var/run/docker.sock"
        state: present
        timeout: 30

    - name: Get machine ip address
      shell: "{{ dev_env_dir }}/bin/gdev machine ip"
      register: machine_ip

    - name: "Debug dlite ip"
      debug:
        msg: "Dlite is up and running: {{ machine_ip.stdout }}"

    - name: Start gdev services
      command: "{{ dev_env_dir }}/bin/gdev service up"

    - name: Wait for signaler to create CA file
      wait_for:
        path: "{{ gdev_user_files }}/ca/ca.crt"
        state: present
        timeout: 30


    # This only works in OS X and doesn't affect firefox
    # We want to use https locally and you only use ca.key which is generated to you
    - name: Trust self-generated signaler Root certificate in keychain
      shell: "security add-trusted-cert -d -r trustRoot -k '/Library/Keychains/System.keychain' ca.crt"
      args:
        chdir: "{{ gdev_user_files }}/ca/"
      become: yes
      become_method: sudo

    - name: Create resolver directory
      file: path=/etc/resolver state=directory mode=0755
      become: yes
      become_method: sudo

    - name: Delete resolver files to trigger dns change
      file:
        path: "/etc/resolver/{{item.domain}}"
        state: absent
      become: yes
      become_method: sudo
      with_items:
        - { ip: "{{ machine_ip.stdout }}", domain: test }

    - name: Create dns resolver files at /etc/resolver/
      template:
        src: "{{ dev_env_dir }}/ansible/resolver-dev.conf.j2"
        dest: "/etc/resolver/{{item.domain}}"
        force: yes
      become: yes
      become_method: sudo
      with_items:
        - { ip: "{{ machine_ip.stdout }}", domain: test }

    - name: Add dev binary to PATH to .zshrc
      lineinfile:
        dest: ~/.zshrc
        line: "source {{ dev_env_dir }}/ansible/mac_profile"
        create: yes
      when: ansible_env.SHELL == "/bin/zsh" or ansible_env.SHELL == "/usr/local/bin/zsh"

    - name: Add dev binary to PATH to .bash_profile
      lineinfile:
        dest: ~/.bash_profile
        line: "source {{ dev_env_dir }}/ansible/mac_profile"
        create: yes
      when: ansible_env.SHELL == "/bin/bash"

    - name: Add dev binary to PATH to .config/fish/config.fish
      lineinfile:
        dest: ~/.config/fish/config.fish
        line: "source {{ dev_env_dir }}/ansible/mac_profile.fish"
        create: yes
      when: ansible_env.SHELL == "/usr/local/bin/fish"